package com.sarxos.medusa.generator;

import java.util.LinkedList;
import java.util.List;

import com.sarxos.gpwnotifier.entities.Quote;
import com.sarxos.gpwnotifier.entities.Signal;
import com.sarxos.gpwnotifier.entities.SignalGenerator;
import com.sarxos.gpwnotifier.entities.SignalType;
import com.sarxos.gpwnotifier.math.ADX;
import com.sarxos.gpwnotifier.math.MA;

/**
 * <p>
 * BFG shall be used for standard stock market
 * bases on the interconnection of EMA5 & SMA15 crosscutting with ADX(P)
 * used as a signal filter. All signals generated in non-bears and
 * non-bulls trend relies are delayed in time waiting for the ADX(P)
 * gain open.
 * </p>
 * 
 * <p>
 * <b>This generator is NOT good for unstable stock papers!</b>
 * </p>
 * 
 * <p>
 * D(n) = EMA(Q(n), 5) - SMA(Q(n), 15)<br>
 * G(n) = ADX(Q(n), P)<br><br>
 * 
 * B &lt;=&gt; D(n) &gt; 0 && G(n) &gt; 25<br>
 * S &lt;=&gt; D(n) &lt; 0 && G(n) &gt; 25
 * </p>
 * 
 * @author Bartosz Firyn (SarXos)
 */
public class BFG implements SignalGenerator<Quote> {

	private double TS = 30;
	
	/**
	 * BFG operates on EMA 5 & SMA 15 deltas with
	 * ADX used as the delay filter. You can specify trend strength as the
	 * constructor argument. ADX will range between 0 and 100. Generally, 
	 * ADX readings below 20 indicate trend weakness, and readings above 40 
	 * indicate trend strength. An extremely strong trend is indicated by
	 * readings above 50.
	 * 
	 * @param TS - Trend Strength
	 */
	public BFG(double TS) {
		this.TS = TS;
	}

	@Override
	public List<Signal> generate(Quote[] data, int R) {
		
		List<Signal> signals = new LinkedList<Signal>();

		Quote[] quotes = new Quote[R];
		
		System.arraycopy(data, data.length - R - 1, quotes, 0, R);
		
		SignalType signal = null;
		Quote q = null;
		
		double[] ema5 = MA.ema(quotes, 5);
		double[] sma15 = MA.sma(quotes, 15);
		double[] adx = ADX.adx(quotes, 5);
		
		double delta = 0;
		
		boolean delay = false;
		
		for (int i = 0; i < R; i++) {
			q = quotes[i];
			delta = ema5[i] - sma15[i];
			if (delta > 0 || delay) {
				if (adx[i] > TS) { 
					if (signal != SignalType.BUY) {
						signal = SignalType.BUY;
						signals.add(new Signal(q.getDate(), signal, q, adx[i]));
					}
					delay = false;
				} else {
					delay = true;
				}
			} else if (delta < 0) {
				if (adx[i] > TS) { 
					if (signal != SignalType.SELL) {
						signal = SignalType.SELL;
						signals.add(new Signal(q.getDate(), signal, q, adx[i]));
					}
					delay = false;
				} else {
					delay = true;
				}
			}
		}
		
		return signals;
	}
}
